generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model User {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  firstName   String    @db.VarChar(255)
  lastName    String    @db.VarChar(255)
  role_id     Int
  created_at  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  password    String    @db.VarChar(255)
  mail        String    @unique(map: "mail_UNIQUE") @db.VarChar(255)
  modified_by String?   @db.VarChar(255)
  role        Role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_Role")
  option      Option[]
  pack        Pack[]
  file        File[]

  @@index([role_id], map: "fk_User_Role_idx")
}

model Option {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  pack_id    Int       @db.UnsignedInt
  created_at DateTime  @db.DateTime(0)
  created_by String    @db.VarChar(255)
  updated_at DateTime? @db.DateTime(0)
  updated_by String?   @db.VarChar(255)
  content    String    @db.VarChar(255)
  price_ht   Float?
  price_ttc  Float?
  creator    User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Response_User")
  pack       Pack      @relation(fields: [pack_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Response_Pack")

  @@index([user_id], map: "fk_Response_User_idx")
}

model Pack {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  created_at DateTime  @db.DateTime(0)
  created_by String    @db.VarChar(255)
  updated_at DateTime? @db.DateTime(0)
  updated_by String?   @db.VarChar(255)
  name       String    @db.VarChar(255)
  price_ht   Float?
  price_ttc  Float?
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Category_User1")
  file       File[]
  Option     Option[]

  @@index([user_id], map: "fk_Category_User_idx")
}

model Customer {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  lastname   String   @db.VarChar(255)
  firstname  String   @db.VarChar(255)
  company    String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  mail       String   @unique(map: "mail_UNIQUE") @db.VarChar(255)
  created_at DateTime @db.DateTime(0)
  file       File[]
}

model File {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int       @db.UnsignedInt
  pack_id     Int       @db.UnsignedInt
  created_at  DateTime  @db.DateTime(0)
  price       Int       @db.UnsignedInt
  customer_id Int       @db.UnsignedInt
  created_by  String?   @db.VarChar(255)
  updated_by  String?   @db.VarChar(255)
  updated_at  DateTime? @db.DateTime(0)
  type        String    @db.VarChar(255)
  price_ht    Float
  price_ttc   Float
  reduction   Float?
  pack        Pack      @relation(fields: [pack_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_Category")
  user        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_User")
  customer    Customer  @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_customer")

  @@index([pack_id], map: "fk_Estimate_Pack_idx")
  @@index([user_id], map: "fk_Estimate_User_idx")
  @@index([customer_id], map: "fk_Estimate_customer_idx")
}

model Role {
  id   Int    @id @default(autoincrement())
  Name String @db.VarChar(255)
  User User[]
}
