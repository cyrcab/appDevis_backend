generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model User {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  firstName             String                  @db.VarChar(255)
  lastName              String                  @db.VarChar(255)
  role_id               Int
  created_at            DateTime?               @db.DateTime(0)
  updated_at            DateTime?               @db.DateTime(0)
  password              String                  @db.VarChar(255)
  mail                  String                  @unique(map: "mail_UNIQUE") @db.VarChar(255)
  modified_by           String?                 @db.VarChar(255)
  Role                  Role                    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_Role")
  Answer                Answer[]
  Category              Category[]
  Estimate              Estimate[]
  Question              Question[]
  User_has_Notification User_has_Notification[]

  @@index([role_id], map: "fk_User_Role_idx")
}

model Answer {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int       @db.UnsignedInt
  question_id Int?      @db.UnsignedInt
  created_at  DateTime  @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  content     String    @db.VarChar(255)
  price       Int?
  modified_by String?   @db.VarChar(255)
  User        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Response_User")
  Question    Question? @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Response_Question")

  @@index([user_id], map: "fk_Response_User_idx")
  Estimate_has_Answer Estimate_has_Answer[]
}

model Category {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int        @db.UnsignedInt
  created_at  DateTime   @db.DateTime(0)
  updated_at  DateTime?  @db.DateTime(0)
  name        String     @db.VarChar(255)
  modified_by String?    @db.VarChar(255)
  User        User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Category_User1")
  Estimate    Estimate[]
  Question    Question[]

  @@index([user_id], map: "fk_Category_User_idx")
}

model Customer {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  lastname  String     @db.VarChar(255)
  firstname String     @db.VarChar(255)
  company   String     @db.VarChar(255)
  phone     String     @db.VarChar(255)
  mail      String     @db.VarChar(255)
  Estimate  Estimate[]
}

model Estimate {
  id                    Int                     @default(autoincrement()) @db.UnsignedInt
  user_id               Int                     @db.UnsignedInt
  category_id           Int                     @db.UnsignedInt
  created_at            DateTime                @db.DateTime(0)
  price                 DateTime                @db.DateTime(0)
  customer_id           Int                     @db.UnsignedInt
  type                  String                  @db.VarChar(255)
  Category              Category                @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_Category")
  User                  User                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_User")
  Customer              Customer                @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_customer")
  Estimate_has_Answer   Estimate_has_Answer[]

  @@id([id, customer_id])
  @@index([category_id], map: "fk_Estimate_Category_idx")
  @@index([user_id], map: "fk_Estimate_User_idx")
  @@index([customer_id], map: "fk_Estimate_customer_idx")
}

model Estimate_has_Answer {
  estimate_id Int      @db.UnsignedInt
  answer_id   Int      @db.UnsignedInt
  Estimate    Estimate @relation(fields: [estimate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_has_Answer_Estimate")
  Answer      Answer   @relation(fields: [answer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Estimate_has_Answer_Answer")

  @@id([estimate_id, answer_id])
  @@index([estimate_id], map: "fk_Estimate_has_Answer_Estimate_idx")
  @@index([answer_id], map: "fk_Estimate_has_Answer_Answer_idx")
}

model Notification {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  date                  DateTime                @db.DateTime(0)
  is_read               Int                     @db.TinyInt
  User_has_Notification User_has_Notification[]
}

model Question {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  user_id               Int                     @db.UnsignedInt
  category_id           Int                     @db.UnsignedInt
  created_at            DateTime                @db.DateTime(0)
  updated_at            DateTime?               @db.DateTime(0)
  is_public             Boolean                 @db.TinyInt
  content               String                  @db.VarChar(255)
  indication            String?                 @db.VarChar(255)
  has_multiple_choice   Boolean                 @db.TinyInt
  modified_by           String?                 @db.VarChar(255)
  User                  User                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Question_User")
  Category              Category                @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_Question_Category")
  Answer                Answer[]

  @@index([user_id], map: "fk_Question_User_idx")
}

model Role {
  id   Int    @id @default(autoincrement())
  Name String @db.VarChar(255)
  User User[]
}

model User_has_Notification {
  user_id         Int          @db.UnsignedInt
  notification_id Int          @db.UnsignedInt
  Notification    Notification @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_has_Notification_Notification1")
  User            User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_has_Notification_User1")

  @@id([user_id, notification_id])
  @@index([notification_id], map: "fk_User_has_Notification_Notification1_idx")
  @@index([user_id], map: "fk_User_has_Notification_User1_idx")
}
